
rules_version = '2';

service cloud.firestore {

  // Rules for the (default) database, where auth_users collection will reside
  match /databases/(default)/documents {
    // Collection for user authentication and profiles
    match /auth_users/{userEmail} {
      // Allow client to get its own user profile to check approval status
      // This is needed for the AppLayout to function correctly.
      allow get: if true; // Simplified for prototype, ideally check if requesting userEmail matches some client context

      // Server Actions (using Admin SDK) will handle create, update, delete.
      // Deny direct client modification of user profiles.
      allow list, create, update, delete: if false;
    }

    // Deny access to any other collections in the (default) database by default.
    match /{document=**} {
      allow read, write: if false;
    }
  }

  // Rules for the "ecom" named database, where user_products collection will reside
  match /databases/ecom/documents {
    // User-specific product data
    match /user_products/{userEmail}/uploaded_products/{document=**} {
      // For prototype: Allow client to read/write/delete its own product data.
      // In a production app, you'd want to secure this further, possibly by
      // verifying that the userEmail in the path matches the authenticated user
      // (which is hard without Firebase Auth tokens, relying on client to send correct userEmail).
      // For now, to make client-side operations work:
      allow read, write: if true; // More permissive for client-side prototype
    }

    // Deny access to any other collections in the "ecom" database by default.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
